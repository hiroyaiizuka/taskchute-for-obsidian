name: Auto Release (manual)

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: "Version bump type"
        required: true
        default: "patch"
        type: choice
        options: [patch, minor, major]

permissions:
  contents: write

jobs:
  auto-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install deps
        run: |
          npm ci || npm install

      - name: Configure git user
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name  "github-actions[bot]"

      # 1) 版本上げ（root package.json） 2) あなたのスクリプトで manifest.json 同期
      - name: Bump version & sync manifest
        id: bump
        run: |
          npm version "${{ github.event.inputs.version_type }}" --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

          # manifest.json を同期（あなたの package.json の "version" スクリプト想定）
          npm run version

          # ついでに存在すれば一緒にコミット
          git add package.json manifest.json || true
          [ -f versions.json ] && git add versions.json || true
          [ -f README.md ] && git add README.md || true
          git commit -m "chore: release ${NEW_VERSION}" || echo "No changes"

      - name: Push changes
        run: git push origin HEAD

      # v なしタグ（例: 0.1.4）。v を付けたいなら "v${{ steps.bump.outputs.new_version }}" に変更
      - name: Create & push tag
        run: |
          TAG="${{ steps.bump.outputs.new_version }}"
          git tag "$TAG"
          git push origin "$TAG"

      - name: Build plugin
        env:
          NODE_ENV: production
        run: |
          npm run build

      - name: Prepare release assets
        id: prep
        run: |
          set -e
          TAG="${{ steps.bump.outputs.new_version }}"
          PKG_DIR="release-${TAG}"
          mkdir -p "$PKG_DIR"

          # main.js の検出
          if   [ -f packages/obsidian-plugin/main.js ]; then SRC_MAIN=packages/obsidian-plugin/main.js
          elif [ -f dist/main.js ]; then SRC_MAIN=dist/main.js
          elif [ -f main.js ]; then SRC_MAIN=main.js
          else
            echo "ERROR: main.js が見つかりません。"; exit 1
          fi
          cp "$SRC_MAIN" "$PKG_DIR/main.js"

          # manifest.json（rootを採用）
          if [ ! -f manifest.json ]; then
            echo "ERROR: manifest.json が見つかりません。"; exit 1
          fi
          cp manifest.json "$PKG_DIR/manifest.json"

          # styles.css（必須と聞いたので必須扱い）
          if   [ -f packages/obsidian-plugin/styles.css ]; then SRC_CSS=packages/obsidian-plugin/styles.css
          elif [ -f styles.css ]; then SRC_CSS=styles.css
          else
            echo "ERROR: styles.css が見つかりません。"; exit 1
          fi
          cp "$SRC_CSS" "$PKG_DIR/styles.css"

          (cd "$PKG_DIR" && zip -r "../${PKG_DIR}.zip" .)

          echo "zip=${PKG_DIR}.zip" >> $GITHUB_OUTPUT
          echo "dir=${PKG_DIR}" >> $GITHUB_OUTPUT

      - name: Create GitHub Release (published)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.bump.outputs.new_version }}
          name: ${{ steps.bump.outputs.new_version }}
          generate_release_notes: true
          files: |
            ${{ steps.prep.outputs.zip }}
            ${{ steps.prep.outputs.dir }}/main.js
            ${{ steps.prep.outputs.dir }}/manifest.json
            ${{ steps.prep.outputs.dir }}/styles.css
